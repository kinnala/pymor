name: Conda Tests
on: [push]

jobs:
  miniconda:
    name: Miniconda ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
            include:
              - os: ubuntu-20.04
                prefix: /usr/share/miniconda3/envs/pyMOR-ci
              - os: macos-11
                prefix: /Users/runner/miniconda3/envs/pyMOR-ci
              - os: windows-2022
                prefix: C:\Miniconda3\envs\pyMOR-ci
            # avoid failure in one job immeadiately cancelling all others
        fail-fast: false
    steps:
      - name: Install required X libs (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
      - uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: pyMOR-ci
          miniforge-variant: Mambaforge
          use-mamba: true
          python-version: 3.9
          channels: conda-forge
          channel-priority: true
           # This needs to be set for caching to work properly!
          use-only-tar-bz2: true
      - name: Cache conda
        uses: actions/cache@v2
        id: cache
        env:
          # Increase this value to reset cache if .ci/conda-env.yml have not changed
          CACHE_NUMBER: 0
        with:
          path: ${{ matrix.prefix }}
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('.ci/conda-env.yml') }}
      - name: Update environment
        run: mamba env update -n pyMOR-ci -f .ci/conda-env.yml
        if: steps.cache.outputs.cache-hit != 'true'
      - shell: bash -l {0}
        run: |
          mamba info
          mamba list
      - name: Install pyMOR
        shell: bash -l {0}
        # this seems to be the most portable way of making sure everything is importable
        run: conda develop .
        # alas it still does not work everywhere, so manual PYTHONPATH it is
      - name: Platform env
        shell: bash -l {0}
        run: |
          if [[ ${{ runner.os }} == Linux ]]; then
            echo "PYTEST_PREFIX=xvfb-run -a" >> $GITHUB_ENV
          fi
          # windows currently segfaults in first QT+MPL plot otherwise
          if [[ ${{ runner.os }} == Windows ]]; then
            echo "QT_API=pyside2" >> $GITHUB_ENV
          fi
      - name: Run pytest
        shell: bash -l {0}
        env:
          PYTHONPATH: ./src
        run: |
            ${PYTEST_PREFIX} pytest -vs src/pymortests/demos.py -k "thermal"
